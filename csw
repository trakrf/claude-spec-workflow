#!/bin/bash
# Claude Spec Workflow CLI wrapper

set -e

# Detect installation directory from this script's location
# Resolve symlinks to find the actual project directory
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
    DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
CSW_HOME="$(cd -P "$(dirname "$SOURCE")" && pwd)"
SCRIPT_DIR="$CSW_HOME/scripts"

usage() {
    cat << EOF
Claude Spec Workflow (csw) - Specification-driven development CLI

Usage: csw <command> [arguments]

Commands:
  spec [name]        Create specification from conversation
  plan <spec-file>   Generate implementation plan
  build              Execute build with progress tracking
  check              Run validation suite (test/lint/build)
  ship <feature>     Create PR and prepare for merge
  cleanup            Clean up shipped features (delete specs)

Examples:
  csw spec auth-system
  csw plan spec/active/auth-system/spec.md
  csw check
  csw ship auth-system

For more information: https://github.com/trakrf/claude-spec-workflow
EOF
}

case "${1:-}" in
    install)
        # csw install - Install CSW globally
        echo "üöÄ Installing Claude Spec Workflow"
        echo ""

        # Detect installation directory
        INSTALL_DIR="$CSW_HOME"
        echo "Installation directory: $INSTALL_DIR"
        echo ""

        # Install Claude commands
        CLAUDE_COMMANDS_DIR="$HOME/.claude/commands"
        REPO_COMMANDS_DIR="$INSTALL_DIR/commands"

        if [ ! -d "$REPO_COMMANDS_DIR" ]; then
            echo "‚ùå Error: commands directory not found at $REPO_COMMANDS_DIR"
            echo "   This should not happen. Please report this issue."
            exit 1
        fi

        if [ ! -d "$CLAUDE_COMMANDS_DIR" ]; then
            echo "üìÅ Creating Claude commands directory..."
            mkdir -p "$CLAUDE_COMMANDS_DIR"
        fi

        echo "üì¶ Installing commands..."
        updated=0
        installed=0
        for cmd in "$REPO_COMMANDS_DIR"/*.md; do
            if [ -f "$cmd" ]; then
                filename=$(basename "$cmd")
                target="$CLAUDE_COMMANDS_DIR/$filename"
                if [ -f "$target" ]; then
                    echo "   ‚Üª Updated $filename"
                    ((updated++))
                else
                    echo "   ‚úì Installed $filename"
                    ((installed++))
                fi
                cp "$cmd" "$target"
            fi
        done
        echo ""

        # Install csw CLI
        echo "üîß Installing csw CLI..."
        CSW_BIN_DIR="$HOME/.local/bin"
        if [ ! -d "$CSW_BIN_DIR" ]; then
            echo "   üìÅ Creating $CSW_BIN_DIR..."
            mkdir -p "$CSW_BIN_DIR"
        fi

        # Check if already installed
        if [ -L "$CSW_BIN_DIR/csw" ]; then
            existing_target=$(readlink "$CSW_BIN_DIR/csw")
            if [ "$existing_target" = "$INSTALL_DIR/csw" ]; then
                echo "   ‚úÖ Already installed (up to date)"
            else
                echo "   ‚Üª Updating symlink"
                ln -sf "$INSTALL_DIR/csw" "$CSW_BIN_DIR/csw"
            fi
        else
            echo "   üîó Creating symlink: csw -> $INSTALL_DIR/csw"
            ln -sf "$INSTALL_DIR/csw" "$CSW_BIN_DIR/csw"
        fi
        echo ""

        # Check if ~/.local/bin is in PATH
        if [[ ":$PATH:" != *":$CSW_BIN_DIR:"* ]]; then
            echo "‚ö†Ô∏è  Note: $CSW_BIN_DIR is not in your PATH"
            echo "   Add this line to your ~/.bashrc or ~/.zshrc:"
            echo ""
            echo "   export PATH=\"\$HOME/.local/bin:\$PATH\""
            echo ""
            echo "   Then run: source ~/.bashrc (or ~/.zshrc)"
            echo ""
            echo "   Alternatively, use ./spec/csw in your projects"
            echo ""
        fi

        echo "‚úÖ Installation complete!"
        echo ""
        echo "Installed: $installed command(s)"
        echo "Updated: $updated command(s)"
        echo ""
        echo "üìã Next: Initialize a project"
        echo "   csw init /path/to/project [preset]"
        echo ""
        exit 0
        ;;
    init)
        # csw init <project-dir> [preset] [--no-bootstrap-spec]
        shift  # Remove 'init' from arguments

        PROJECT_DIR="${1:-.}"
        PRESET="${2:-typescript-react-vite}"
        CREATE_BOOTSTRAP=true  # Default: always create bootstrap

        # Parse flags
        for arg in "$@"; do
            if [[ "$arg" == "--no-bootstrap-spec" ]]; then
                CREATE_BOOTSTRAP=false
            fi
        done

        # Handle 'default' literal
        if [[ $PRESET == "default" ]]; then
            PRESET="typescript-react-vite"
        fi

        echo "üèóÔ∏è  Initializing Claude Spec Workflow"
        echo "   Project: $PROJECT_DIR"
        echo "   Preset: $PRESET"
        echo ""

        # Directory validation with prompt
        if [ ! -d "$PROJECT_DIR" ]; then
            echo "‚ö†Ô∏è  Directory does not exist: $PROJECT_DIR"
            read -p "Create it? (y/n) " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                echo "‚ùå Cancelled"
                exit 1
            fi
            mkdir -p "$PROJECT_DIR"
            echo "‚úÖ Created directory: $PROJECT_DIR"
            echo ""
        fi

        # Check if spec/ already exists
        if [ -d "$PROJECT_DIR/spec" ]; then
            echo "‚ö†Ô∏è  spec/ already exists in $PROJECT_DIR"
            read -p "Reinitialize? (y/n) " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                echo "‚ÑπÔ∏è  Cancelled"
                exit 0
            fi
            echo ""
        fi

        # Preset fuzzy matching
        PRESETS_DIR="$CSW_HOME/presets"

        # Check if PRESET is a file path (contains /)
        if [[ $PRESET == */* ]]; then
            PRESET_FILE="$PRESET"
            [[ ! $PRESET_FILE =~ \.md$ ]] && PRESET_FILE="${PRESET_FILE}.md"
        else
            # Strip .md if user provided it
            [[ $PRESET =~ \.md$ ]] && PRESET="${PRESET%.md}"

            # Try exact match first
            if [ -f "$PRESETS_DIR/$PRESET.md" ]; then
                PRESET_FILE="$PRESETS_DIR/$PRESET.md"
            else
                # Try case-insensitive match
                PRESET_LOWER="${PRESET,,}"
                EXACT_MATCH=$(find "$PRESETS_DIR" -maxdepth 1 -iname "$PRESET_LOWER.md" 2>/dev/null | head -1)

                if [ -n "$EXACT_MATCH" ]; then
                    PRESET_FILE="$EXACT_MATCH"
                else
                    # Try substring match
                    MATCHES=$(find "$PRESETS_DIR" -maxdepth 1 -name "*$PRESET*.md" 2>/dev/null)
                    MATCH_COUNT=$(echo "$MATCHES" | grep -c . || echo 0)

                    if [ "$MATCH_COUNT" -eq 0 ]; then
                        echo "‚ùå Error: Preset '$PRESET' not found"
                        echo ""
                        echo "Available presets:"
                        for p in "$PRESETS_DIR"/*.md; do
                            basename "$p" .md | sed 's/^/  - /'
                        done
                        exit 1
                    elif [ "$MATCH_COUNT" -eq 1 ]; then
                        PRESET_FILE="$MATCHES"
                        echo "‚ÑπÔ∏è  Matched preset: $(basename "$PRESET_FILE" .md)"
                        echo ""
                    else
                        echo "‚ùå Error: Multiple presets match '$PRESET'"
                        echo ""
                        echo "Matching presets:"
                        echo "$MATCHES" | while read -r match; do
                            basename "$match" .md | sed 's/^/  - /'
                        done
                        echo ""
                        echo "Please be more specific"
                        exit 1
                    fi
                fi
            fi
        fi

        # Validate preset file exists
        if [ ! -f "$PRESET_FILE" ]; then
            echo "‚ùå Error: Preset file not found: $PRESET_FILE"
            exit 1
        fi

        # Create spec directory structure
        echo "üìÅ Creating spec directories..."
        mkdir -p "$PROJECT_DIR/spec/active"

        # Initialize SHIPPED.md if it doesn't exist
        if [ ! -f "$PROJECT_DIR/spec/SHIPPED.md" ]; then
            touch "$PROJECT_DIR/spec/SHIPPED.md"
        fi

        # Check for existing files and prompt for overwrite
        FILES_TO_OVERWRITE=()
        [ -f "$PROJECT_DIR/spec/stack.md" ] && FILES_TO_OVERWRITE+=("spec/stack.md")
        [ -f "$PROJECT_DIR/spec/template.md" ] && FILES_TO_OVERWRITE+=("spec/template.md")
        [ -f "$PROJECT_DIR/spec/README.md" ] && FILES_TO_OVERWRITE+=("spec/README.md")

        if [ ${#FILES_TO_OVERWRITE[@]} -gt 0 ]; then
            echo "‚ö†Ô∏è  The following files will be overwritten:"
            for file in "${FILES_TO_OVERWRITE[@]}"; do
                echo "   - $file"
            done
            echo ""
            echo "You can revert with: git checkout -- spec/"
            echo ""
            read -p "Continue? (y/n) " -n 1 -r
            echo ""
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                echo "‚ÑπÔ∏è  Cancelled"
                exit 0
            fi
            echo ""
        fi

        # Copy files
        echo "üìÑ Copying configuration files..."
        cp "$PRESET_FILE" "$PROJECT_DIR/spec/stack.md"
        echo "   ‚úì stack.md (preset: $(basename "$PRESET_FILE" .md))"
        cp "$CSW_HOME/templates/spec-template.md" "$PROJECT_DIR/spec/template.md"
        echo "   ‚úì template.md"
        cp "$CSW_HOME/templates/README.md" "$PROJECT_DIR/spec/README.md"
        echo "   ‚úì README.md"
        echo ""

        # Add to .gitignore
        if [ -f "$PROJECT_DIR/.gitignore" ]; then
            if ! grep -q "spec/active/\*/log.md" "$PROJECT_DIR/.gitignore" 2>/dev/null; then
                echo "üìù Adding spec logs to .gitignore..."
                echo -e "\n# Spec workflow logs\nspec/active/*/log.md" >> "$PROJECT_DIR/.gitignore"
            fi
        fi

        # Create spec/csw symlink (always direct path - fallback use case)
        echo "üîó Creating spec/csw symlink..."
        CSW_BIN="$CSW_HOME/csw"
        ln -sf "$CSW_BIN" "$PROJECT_DIR/spec/csw"
        echo "   ‚úì spec/csw -> $CSW_BIN"
        echo ""

        # Generate bootstrap validation spec (default for everyone)
        if [ "$CREATE_BOOTSTRAP" = true ]; then
            # Check if spec directory already has content (reinit scenario)
            EXISTING_SPECS=$(find "$PROJECT_DIR/spec" -mindepth 1 -maxdepth 1 -type d ! -name active 2>/dev/null | wc -l)

            if [ "$EXISTING_SPECS" -gt 0 ]; then
                echo "‚ö†Ô∏è  Spec directory has existing content"
                read -p "Create bootstrap spec anyway? (y/n) " -n 1 -r
                echo ""
                if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                    CREATE_BOOTSTRAP=false
                fi
            fi
        fi

        if [ "$CREATE_BOOTSTRAP" = true ]; then
            echo "üìù Creating bootstrap validation spec..."
            BOOTSTRAP_DIR="$PROJECT_DIR/spec/bootstrap"
            mkdir -p "$BOOTSTRAP_DIR"

            # Get current date and stack name
            CURRENT_DATE=$(date +%Y-%m-%d)
            PRESET_NAME=$(basename "$PRESET_FILE" .md)

            # Get human-readable stack name
            case "$PRESET_NAME" in
                "typescript-react-vite") STACK_NAME="TypeScript + React + Vite" ;;
                "nextjs-app-router") STACK_NAME="Next.js App Router + TypeScript" ;;
                "python-fastapi") STACK_NAME="Python + FastAPI" ;;
                "go-standard") STACK_NAME="Go" ;;
                "monorepo-go-react") STACK_NAME="Go + React Monorepo" ;;
                "shell-scripts") STACK_NAME="Shell Scripts (Bash)" ;;
                *) STACK_NAME="$PRESET_NAME" ;;
            esac

            # Copy and populate template
            if [ -f "$CSW_HOME/templates/bootstrap-spec.md" ]; then
                cp "$CSW_HOME/templates/bootstrap-spec.md" "$BOOTSTRAP_DIR/spec.md"

                # Replace placeholders (use | as delimiter to avoid issues with /)
                sed -i "s|{{STACK_NAME}}|$STACK_NAME|g" "$BOOTSTRAP_DIR/spec.md"
                sed -i "s|{{PRESET_NAME}}|$PRESET_NAME|g" "$BOOTSTRAP_DIR/spec.md"
                sed -i "s|{{INSTALL_DATE}}|$CURRENT_DATE|g" "$BOOTSTRAP_DIR/spec.md"

                echo "   ‚úì bootstrap/spec.md"
            else
                echo "   ‚ö†Ô∏è  Bootstrap template not found, skipping"
            fi
            echo ""
        fi

        # Success message
        echo "‚úÖ Claude Spec Workflow Setup Complete!"
        echo ""
        echo "üìÇ Directory structure:"
        echo "   spec/"
        echo "   ‚îú‚îÄ‚îÄ README.md       # Workflow documentation"
        echo "   ‚îú‚îÄ‚îÄ template.md     # Spec template"
        echo "   ‚îú‚îÄ‚îÄ stack.md        # Validation commands"
        echo "   ‚îú‚îÄ‚îÄ SHIPPED.md      # Completed features log"

        if [ "$CREATE_BOOTSTRAP" = true ]; then
            echo "   ‚îî‚îÄ‚îÄ bootstrap/      # Bootstrap validation spec ‚≠ê"
            echo ""
            echo "üöÄ Next: Validate installation"
            echo ""
            echo "   In Claude Code:"
            echo "   1. /plan bootstrap"
            echo "   2. /build"
            echo "   3. /check"
            echo "   4. /ship"
        fi

        echo ""
        echo "üí° Three ways to run commands:"
        echo "   - In Claude Code:  /plan my-feature"
        echo "   - In terminal:     csw plan my-feature"
        echo "   - In project:      ./spec/csw plan my-feature"
        echo ""
        exit 0
        ;;
    spec|plan|build|check|ship|cleanup)
        COMMAND="$1"
        shift
        exec "$SCRIPT_DIR/$COMMAND.sh" "$@"
        ;;
    help|--help|-h)
        usage
        exit 0
        ;;
    --version|-v)
        echo "csw 0.2.2"
        exit 0
        ;;
    "")
        usage
        exit 1
        ;;
    *)
        echo "Error: Unknown command '$1'"
        echo ""
        usage
        exit 1
        ;;
esac
